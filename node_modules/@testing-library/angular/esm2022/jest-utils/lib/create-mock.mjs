export function createMock(type) {
    const mock = {};
    function mockFunctions(proto) {
        if (!proto) {
            return;
        }
        for (const prop of Object.getOwnPropertyNames(proto)) {
            if (prop === 'constructor') {
                continue;
            }
            const descriptor = Object.getOwnPropertyDescriptor(proto, prop);
            if (typeof descriptor?.value === 'function') {
                mock[prop] = jest.fn();
            }
        }
        mockFunctions(Object.getPrototypeOf(proto));
    }
    mockFunctions(type.prototype);
    return mock;
}
export function createMockWithValues(type, values) {
    const mock = createMock(type);
    Object.entries(values).forEach(([field, value]) => {
        mock[field] = value;
    });
    return mock;
}
export function provideMock(type) {
    return {
        provide: type,
        useValue: createMock(type),
    };
}
export function provideMockWithValues(type, values) {
    return {
        provide: type,
        useValue: createMockWithValues(type, values),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90ZXN0aW5nLWxpYnJhcnkvamVzdC11dGlscy9zcmMvbGliL2NyZWF0ZS1tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sVUFBVSxVQUFVLENBQUksSUFBYTtJQUN6QyxNQUFNLElBQUksR0FBUSxFQUFFLENBQUM7SUFFckIsU0FBUyxhQUFhLENBQUMsS0FBVTtRQUMvQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTztTQUNSO1FBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEQsSUFBSSxJQUFJLEtBQUssYUFBYSxFQUFFO2dCQUMxQixTQUFTO2FBQ1Y7WUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hFLElBQUksT0FBTyxVQUFVLEVBQUUsS0FBSyxLQUFLLFVBQVUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUN4QjtTQUNGO1FBRUQsYUFBYSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU5QixPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQXVCLElBQWEsRUFBRSxNQUFnQztJQUN4RyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQy9DLElBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFJLElBQWE7SUFDMUMsT0FBTztRQUNMLE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUM7S0FDM0IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQXVCLElBQWEsRUFBRSxNQUFnQztJQUN6RyxPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztLQUM3QyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIE1vY2s8VD4gPSBUICYgeyBbSyBpbiBrZXlvZiBUXTogVFtLXSAmIGplc3QuTW9jayB9O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9jazxUPih0eXBlOiBUeXBlPFQ+KTogTW9jazxUPiB7XG4gIGNvbnN0IG1vY2s6IGFueSA9IHt9O1xuXG4gIGZ1bmN0aW9uIG1vY2tGdW5jdGlvbnMocHJvdG86IGFueSkge1xuICAgIGlmICghcHJvdG8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG8pKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIHByb3ApO1xuICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yPy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtb2NrW3Byb3BdID0gamVzdC5mbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vY2tGdW5jdGlvbnMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSk7XG4gIH1cblxuICBtb2NrRnVuY3Rpb25zKHR5cGUucHJvdG90eXBlKTtcblxuICByZXR1cm4gbW9jaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tXaXRoVmFsdWVzPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPih0eXBlOiBUeXBlPFQ+LCB2YWx1ZXM6IFBhcnRpYWw8UmVjb3JkPEssIFRbS10+Pik6IE1vY2s8VD4ge1xuICBjb25zdCBtb2NrID0gY3JlYXRlTW9jayh0eXBlKTtcblxuICBPYmplY3QuZW50cmllcyh2YWx1ZXMpLmZvckVhY2goKFtmaWVsZCwgdmFsdWVdKSA9PiB7XG4gICAgKG1vY2sgYXMgYW55KVtmaWVsZF0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIG1vY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTW9jazxUPih0eXBlOiBUeXBlPFQ+KTogUHJvdmlkZXIge1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IHR5cGUsXG4gICAgdXNlVmFsdWU6IGNyZWF0ZU1vY2sodHlwZSksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTW9ja1dpdGhWYWx1ZXM8VCwgSyBleHRlbmRzIGtleW9mIFQ+KHR5cGU6IFR5cGU8VD4sIHZhbHVlczogUGFydGlhbDxSZWNvcmQ8SywgVFtLXT4+KTogUHJvdmlkZXIge1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IHR5cGUsXG4gICAgdXNlVmFsdWU6IGNyZWF0ZU1vY2tXaXRoVmFsdWVzKHR5cGUsIHZhbHVlcyksXG4gIH07XG59XG4iXX0=