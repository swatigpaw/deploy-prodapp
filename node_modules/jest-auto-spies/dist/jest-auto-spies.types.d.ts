/// <reference types="jest" />
import { Observable } from 'rxjs';
import { AddObservableSpyMethods, AddPromiseSpyMethods, Func, AddAccessorsSpies, CreateSyncAutoSpy, CreateObservableAutoSpy, CreatePromiseAutoSpy } from '@hirez_io/auto-spies-core';
export type Spy<ClassToSpyOn> = AddJestAutoSpies<ClassToSpyOn> & AddAccessorsSpies<ClassToSpyOn, jest.Mock>;
type AddJestAutoSpies<ClassToSpyOn> = {
    [Key in keyof ClassToSpyOn]: ClassToSpyOn[Key] extends Func ? AddSpyMethodsByReturnTypes<ClassToSpyOn[Key]> : ClassToSpyOn[Key] extends Observable<infer ObservableReturnType> ? ClassToSpyOn[Key] & AddObservableSpyMethods<ObservableReturnType> : ClassToSpyOn[Key];
};
export type AddSpyMethodsByReturnTypes<Method extends Func> = Method & (Method extends (...args: any[]) => infer ReturnType ? ReturnType extends Promise<infer PromiseReturnType> ? CreatePromiseAutoSpy<jest.MockedFunction<Method>, AddPromiseSpyMethods<PromiseReturnType>, Method> : ReturnType extends Observable<infer ObservableReturnType> ? CreateObservableAutoSpy<jest.MockedFunction<Method>, AddObservableSpyMethods<ObservableReturnType>, Method> : CreateSyncAutoSpy<Method, jest.MockedFunction<Method>, AddCalledWithToJestFunctionSpy<Method>> : never);
export interface AddCalledWithToJestFunctionSpy<Method extends Func> {
    calledWith(...args: Parameters<Method>): {
        mockReturnValue: (value: ReturnType<Method>) => void;
    };
    mustBeCalledWith(...args: Parameters<Method>): {
        mockReturnValue: (value: ReturnType<Method>) => void;
    };
}
export {};
